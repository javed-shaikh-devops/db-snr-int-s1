name: Deploy Istio Ingress with Google CAS
on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'GCP Project ID'
        required: true
      region:
        description: 'GCP Region'
        default: 'europe-west1'


env:
  CLUSTER_NAME: istio-cas-demo
  HELM_CHART_DIR: ./solution_helm

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    defaults:
      run:
        shell: bash


    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud using WIF
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.OIDC_AUDIENCE  }}
          service_account: ${{ secrets.terraform_sa }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./solution_terraform
        run: |
          pwd
          ls -trl 
          terraform init -input=false  

      - name: Terraform Plan
        working-directory: ./solution_terraform
        run: terraform plan -var="project_id=${{ secrets.gcp_project_id }}" -var="region=${{ github.event.inputs.region }}" -out=solution_terraform


      - name: Terraform Apply
        working-directory: ./solution_terraform
        env:
          TF_LOG: DEBUG
          TF_LOG_PATH: terraform-debug.log
        run: terraform apply -auto-approve -input=false -var="project_id=${{ secrets.gcp_project_id }}" -var="region=${{ github.event.inputs.region }}" solution_terraform


      - name: Get Terraform outputs
        working-directory: ./solution_terraform
        id: terraform
        run: |
          echo "CA_POOL_NAME=$(terraform output -raw ca_pool_name)" >> $GITHUB_OUTPUT
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "CLUSTER_ENDPOINT=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT
          echo "SERVICE_ACCOUNT_NAME=$(terraform output -raw cert_manager_sa_email)" >> $GITHUB_OUTPUT

      - name: Save outputs
        working-directory: ./solution_terraform
        run: |
          echo "CA_POOL_NAME=${{ steps.terraform.outputs.CA_POOL_NAME }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${{ steps.terraform.outputs.CLUSTER_NAME }}" >> $GITHUB_ENV
          echo "CLUSTER_ENDPOINT=${{ steps.terraform.outputs.CLUSTER_ENDPOINT }}" >> $GITHUB_ENV
          echo "SERVICE_ACCOUNT_NAME=$(terraform output -raw cert_manager_sa_email)" >> $GITHUB_ENV
          

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --region ${{ github.event.inputs.region }} \
            --project ${{ github.event.inputs.project_id }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

#      - name: Grant cluster-admin to cert-manager-cas-issuer-sa
#        run: |
#          kubectl create clusterrolebinding cert-manager-cas-issuer-admin-binding \
#            --clusterrole=cluster-admin \
#            --user=cert-manager-cas-issuer-sa@${{ github.event.inputs.project_id }}.iam.gserviceaccount.com || true
      
      - name: Configure Helm Repo's
        run: |
          helm repo add istio https://istio-release.storage.googleapis.com/charts
          helm repo add jetstack https://charts.jetstack.io --force-update
          helm repo update

      - name: Install Cert Manager
        run: |
          helm upgrade --install cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --version v1.17.0 \
            --set crds.enabled=true 

      - name: Install Google CAS Issuer
        run: |
          helm upgrade --install google-cas-issuer ./solution_helm/cert-manager-google-cas-issuer \
            --namespace cert-manager \
            --version v0.9.0 \
            --set crds.enabled=true

      - name: Install Istio
        run: |

          # Install Istio if not exists
          if ! helm status istiod -n istio-system >/dev/null 2>&1; then
          helm upgrade --install istio-base istio/base \
            --namespace istio-system \
            --create-namespace \
            --version 1.18.0

          helm upgrade --install istiod istio/istiod \
            --namespace istio-system \
            --version 1.18.0 \
            --wait  --timeout 10m

          helm upgrade --install istio-ingressgateway istio/gateway \
            --namespace istio-system \
            --version 1.18.0 \
            --set service.type=LoadBalancer
          
          else
            echo "Isto already installed"
          fi

      - name: Apply Rbac
        run: |
      
          kubectl apply -f ./solution_helm/istio-cas-ingress/templates/cert-manager-cas-issuer-rbac.yaml
          kubectl apply -f ./solution_helm/istio-cas-ingress/templates/cas-issuer.yaml
          sleep 10
          kubectl rollout restart deployment -n cert-manager cert-manager-google-cas-issuer

      - name: Deploy Helm chart
        run: |
          pwd
          cd $GITHUB_WORKSPACE
          pwd

          helm dependency build ./solution_helm/istio-cas-ingress

          helm upgrade --install istio-cas-ingress ${{ env.HELM_CHART_DIR }} \
            --namespace default \
            --create-namespace \
            --set googleCAS.project=${{ github.event.inputs.project_id }} \
            --set casIssuer.location=${{ github.event.inputs.region }} \
            --set casIssuer.caPoolId=${{ env.CA_POOL_NAME }} 

      - name: Verify resources
        run: |
          kubectl get googlecasclusterissuers -A
          kubectl get certificate
          kubectl get gateway -n istio-system
          kubectl get virtualservice -n istio-system
          sleep 60
          kubectl get secret myapp-ingress-tls -n istio-system
