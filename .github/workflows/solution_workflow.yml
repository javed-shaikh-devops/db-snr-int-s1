name: Deploy Istio Ingress with CAS
on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'GCP Project ID'
        required: true
      region:
        description: 'GCP Region'
        default: 'europe-west1'
      hostname:
        description: 'Hostname for the ingress'
        required: true

env:
  CLUSTER_NAME: istio-cas-demo
  HELM_CHART_DIR: ./solution_helm

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    defaults:
      run:
        shell: bash
        working-directory: ./solution_terraform  # Your terraform folder

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud using WIF
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.OIDC_AUDIENCE  }}
          service_account: ${{ secrets.terraform_sa }}

#      - name: Authenticate to GCP via OIDC
#        env:
#          GOOGLE_SERVICE_ACCOUNT: terraform-sa@db-demo-int.iam.gserviceaccount.com
#          WORKLOAD_IDENTITY_PROVIDER: ${{ secrets.OIDC_AUDIENCE }}
#        run: |
#          gcloud iam workload-identity-pools create-cred-config "$WORKLOAD_IDENTITY_PROVIDER" \
#            --service-account="$GOOGLE_SERVICE_ACCOUNT" \
#            --output-file=./gcp-credentials.json \
#            --credential-source-file=/dev/null
#
#          export GOOGLE_APPLICATION_CREDENTIALS=./gcp-credentials.json
#          gcloud auth login --brief --cred-file="$GOOGLE_APPLICATION_CREDENTIALS"
#          gcloud config set project db-demo-int

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          pwd
          ls -trl 
          terraform init -input=false  

      - name: Terraform Plan
        run: terraform plan -var="project_id=${{ secrets.gcp_project_id }}" -var="region=${{ github.event.inputs.region }}" -out=solution_terraform


      - name: Terraform Apply
        env:
          TF_LOG: DEBUG
          TF_LOG_PATH: terraform-debug.log
        run: terraform apply -auto-approve -input=false -var="project_id=${{ secrets.gcp_project_id }}" -var="region=${{ github.event.inputs.region }}" solution_terraform


      - name: Get Terraform outputs
        id: terraform
        run: |
          echo "CA_POOL_NAME=$(terraform output -raw ca_pool_name)" >> $GITHUB_OUTPUT
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "CLUSTER_ENDPOINT=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT

      - name: Save outputs
        run: |
          echo "CA_POOL_NAME=${{ steps.terraform.outputs.CA_POOL_NAME }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${{ steps.terraform.outputs.CLUSTER_NAME }}" >> $GITHUB_ENV
          echo "CLUSTER_ENDPOINT=${{ steps.terraform.outputs.CLUSTER_ENDPOINT }}" >> $GITHUB_ENV

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --region ${{ github.event.inputs.region }} \
            --project ${{ github.event.inputs.project_id }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Install dependencies
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo add istio https://istio-release.storage.googleapis.com/charts
          helm repo update

          # Install cert-manager if not exists
          helm upgrade --install cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --version v1.12.0 \
            --set installCRDs=true \
            --set serviceAccount.annotations."iam\.gke\.io/gcp-service-account"="cert-manager-cas-issuer-sa@${{ github.event.inputs.project_id }}.iam.gserviceaccount.com"

          # Install Istio if not exists
          helm upgrade --install istio-base istio/base \
            --namespace istio-system \
            --create-namespace \
            --version 1.18.0

          helm upgrade --install istiod istio/istiod \
            --namespace istio-system \
            --version 1.18.0 \
            --wait

          helm upgrade --install istio-ingressgateway istio/gateway \
            --namespace istio-system \
            --version 1.18.0 \
            --set service.type=LoadBalancer

      - name: Deploy Helm chart
        run: |
          helm upgrade --install istio-cas-ingress ${{ env.HELM_CHART_DIR }} \
            --namespace default \
            --create-namespace \
            --set casIssuer.projectId=${{ github.event.inputs.project_id }} \
            --set casIssuer.location=${{ github.event.inputs.region }} \
            --set casIssuer.caPool=${{ env.CA_POOL_NAME }} \
            --set ingress.hostname=${{ github.event.inputs.hostname }} \
            --wait

      - name: Verify resources
        run: |
          kubectl get clusterissuer
          kubectl get certificate
          kubectl get secret ${{ github.event.inputs.hostname }}-tls
          kubectl get gateway
          kubectl get virtualservice

