name: Deploy Istio Ingress with Google CAS
on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'GCP Project ID'
        required: true
      region:
        description: 'GCP Region'
        default: 'europe-west1'


env:
  CLUSTER_NAME: istio-cas-demo
  HELM_CHART_DIR: ./solution_helm

jobs:
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    defaults:
      run:
        shell: bash


    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud using WIF
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.OIDC_AUDIENCE  }}
          service_account: ${{ secrets.terraform_sa }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./solution_terraform
        run: |
          pwd
          ls -trl 
          terraform init -input=false  

      - name: Terraform Plan
        working-directory: ./solution_terraform
        run: terraform plan -var="project_id=${{ secrets.gcp_project_id }}" -var="region=${{ github.event.inputs.region }}" -out=solution_terraform


      - name: Terraform Apply
        working-directory: ./solution_terraform
        env:
          TF_LOG: DEBUG
          TF_LOG_PATH: terraform-debug.log
        run: terraform apply -auto-approve -input=false -var="project_id=${{ secrets.gcp_project_id }}" -var="region=${{ github.event.inputs.region }}" solution_terraform


      - name: Get Terraform outputs
        working-directory: ./solution_terraform
        id: terraform
        run: |
          echo "CA_POOL_NAME=$(terraform output -raw ca_pool_name)" >> $GITHUB_OUTPUT
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "CLUSTER_ENDPOINT=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT

      - name: Save outputs
        working-directory: ./solution_terraform
        run: |
          echo "CA_POOL_NAME=${{ steps.terraform.outputs.CA_POOL_NAME }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${{ steps.terraform.outputs.CLUSTER_NAME }}" >> $GITHUB_ENV
          echo "CLUSTER_ENDPOINT=${{ steps.terraform.outputs.CLUSTER_ENDPOINT }}" >> $GITHUB_ENV

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} \
            --region ${{ github.event.inputs.region }} \
            --project ${{ github.event.inputs.project_id }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.12.0'

      - name: Grant cluster-admin to cert-manager-cas-issuer-sa
        run: |
          kubectl create clusterrolebinding cert-manager-cas-issuer-admin-binding \
            --clusterrole=cluster-admin \
            --user=cert-manager-cas-issuer-sa@${{ github.event.inputs.project_id }}.iam.gserviceaccount.com || true

      - name: Configure Helm Repo's
        run: |
          
          helm repo add istio https://istio-release.storage.googleapis.com/charts
          helm repo update

      - name: Install Cert Manager
        run: |
          
          # Install cert-manager if not exists
           helm repo add jetstack https://charts.jetstack.io --force-update
           helm install \
             cert-manager jetstack/cert-manager \
             --namespace cert-manager \
             --create-namespace \
             --version v1.15.3 \
             --set crds.enabled=true
             --set serviceAccount.name=cert-manager-cas-issuer-sa \
             --set serviceAccount.annotations."iam\.gke\.io/gcp-service-account"="cert-manager-cas-issuer-sa@${{ github.event.inputs.project_id }}.iam.gserviceaccount.com"